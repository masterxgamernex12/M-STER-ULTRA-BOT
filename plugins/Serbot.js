const fs = require("fs");
const path = require("path");
const { Boom } = require("@hapi/boom");
const pino = require("pino");
const QRCode = require("qrcode");
const {
  default: makeWASocket,
  useMultiFileAuthState,
  fetchLatestBaileysVersion,
  makeCacheableSignalKeyStore,
  DisconnectReason,
} = require("@whiskeysockets/baileys");

const { subBots, socketEvents, reconnectionAttempts } = require("../indexsubbots");

const MAX_SUBBOTS = 200;

const handler = async (msg, { conn, command, sock, args }) => {
  const usarPairingCode = ["sercode", "code"].includes(command);
  let sentCodeMessage = false;

  function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  // Funci√≥n para verificar si un n√∫mero existe en WhatsApp
  async function verifyWhatsAppNumber(number) {
    try {
      const formattedNumber = number.replace(/[^0-9]/g, '');
      const jid = `${formattedNumber}@s.whatsapp.net`;

      // Intentar obtener la foto de perfil (si existe, el n√∫mero es v√°lido)
      await conn.profilePictureUrl(jid, 'image');
      return { exists: true, jid };
    } catch (error) {
      if (error.status === 404) {
        return { exists: false, jid: null };
      }
      // Otros errores pueden significar que existe pero no tiene foto
      return { exists: true, jid: `${number.replace(/[^0-9]/g, '')}@s.whatsapp.net` };
    }
  }

  // Funci√≥n para validar formato de n√∫mero
  function isValidPhoneNumber(number) {
    const cleanNumber = number.replace(/[^0-9]/g, '');
    return cleanNumber.length >= 10 && cleanNumber.length <= 15;
  }

  async function serbot() {
    let targetNumber = args[0];

    // Si no se proporcion√≥ n√∫mero, pedirlo
    if (!targetNumber) {
      return await conn.sendMessage(
        msg.key.remoteJid,
        {
          text: `üì± *CONEXI√ìN DE SUB-BOT*\n\nPor favor proporciona un n√∫mero de WhatsApp:\n\n*Ejemplos:*\n${global.prefix}${command} 5491123456789\n${global.prefix}${command} +54 9 11 2345-6789\n\nüí° *Formato:* C√≥digo pa√≠s + n√∫mero (sin espacios especiales)\n\n> Serbot by: *ghostdev.js*`
        },
        { quoted: msg }
      );
    }

    // Validar formato del n√∫mero
    if (!isValidPhoneNumber(targetNumber)) {
      return await conn.sendMessage(
        msg.key.remoteJid,
        {
          text: "‚ùå *N√∫mero inv√°lido*\n\nEl formato debe ser:\n‚Ä¢ 5491123456789\n‚Ä¢ +5491123456789\n‚Ä¢ 541123456789\n\nüì± M√≠nimo 10 d√≠gitos, m√°ximo 15."
        },
        { quoted: msg }
      );
    }

    // Verificar si el n√∫mero existe en WhatsApp
    await conn.sendMessage(msg.key.remoteJid, { 
      react: { text: "üîç", key: msg.key } 
    });

    const verification = await verifyWhatsAppNumber(targetNumber);

    if (!verification.exists) {
      return await conn.sendMessage(
        msg.key.remoteJid,
        {
          text: `‚ùå *N√∫mero no encontrado*\n\nEl n√∫mero *${targetNumber}* no est√° registrado en WhatsApp.\n\nüí° Verifica:\n‚Ä¢ El c√≥digo de pa√≠s\n‚Ä¢ Que el n√∫mero est√© correcto\n‚Ä¢ Que tenga WhatsApp activo`
        },
        { quoted: msg }
      );
    }

    // N√∫mero verificado, continuar con la conexi√≥n
    const number = verification.jid;
    const sessionDir = path.join(__dirname, "../subbots");
    const sessionPath = path.join(sessionDir, number);
    const rid = number.split("@")[0];

    try {
      if (subBots.includes(sessionPath)) {
        return await conn.sendMessage(
          msg.key.remoteJid,
          {
            text: `‚ÑπÔ∏è *Sub-bot ya existe*\n\nEl n√∫mero *${targetNumber}* ya tiene una sesi√≥n activa.\n\nüßπ Usa *${global.prefix}delbots* para eliminar la sesi√≥n actual.\nüîÅ Luego usa *${global.prefix}${command} ${targetNumber}* para crear una nueva.`
          },
          { quoted: msg },
        );
      }

      subBots.push(sessionPath);

      /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ VERIFICACI√ìN DE L√çMITE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
      if (!fs.existsSync(sessionDir)) {
        fs.mkdirSync(sessionDir, { recursive: true });
      }

      const subbotDirs = fs
        .readdirSync(sessionDir)
        .filter((d) => fs.existsSync(path.join(sessionDir, d, "creds.json")));

      if (subbotDirs.length >= MAX_SUBBOTS) {
        await conn.sendMessage(
          msg.key.remoteJid,
          {
            text: `üö´ *L√≠mite alcanzado*\n\nExisten ${subbotDirs.length}/${MAX_SUBBOTS} sesiones activas.\n\nüí° Espera a que alguien elimine su sesi√≥n o contacta al administrador.`
          },
          { quoted: msg },
        );
        return;
      }

      const restantes = MAX_SUBBOTS - subbotDirs.length;
      await conn.sendMessage(
        msg.key.remoteJid,
        {
          text: `‚úÖ *N√∫mero verificado:* ${targetNumber}\nüìä *Espacios disponibles:* ${restantes}/${MAX_SUBBOTS}\n\n> Enviando c√≥digo‚Ä¶`
        },
        { quoted: msg },
      );

      await conn.sendMessage(msg.key.remoteJid, { react: { text: "‚åõ", key: msg.key } });

      let socky;
      async function createSocket() {
        const { state, saveCreds } = await useMultiFileAuthState(sessionPath);
        const { version } = await fetchLatestBaileysVersion();
        const logger = pino({ level: "silent" });

        socky = makeWASocket({
          version,
          logger,
          auth: {
            creds: state.creds,
            keys: makeCacheableSignalKeyStore(state.keys, logger),
          },
          printQRInTerminal: !usarPairingCode,
          browser: ["Windows", "Chrome"],
          syncFullHistory: false,
        });

        return { socky, saveCreds };
      }

      let readyBot = false;
      let connectionTimeout;

      async function setupSocketEvents() {
        const { socky, saveCreds } = await createSocket();

        connectionTimeout = setTimeout(async () => {
          if (!readyBot) {
            await conn.sendMessage(
              msg.key.remoteJid,
              {
                text: `‚è∞ *Tiempo agotado*\n\nNo se escane√≥ el c√≥digo para el n√∫mero *${targetNumber}*.\n\nüí° Vuelve a intentarlo con:\n${global.prefix}${command} ${targetNumber}`
              },
              { quoted: msg },
            );

            const index = subBots.indexOf(sessionPath);
            if (index !== -1) subBots.splice(index, 1);

            socky.end(new Error("Timeout"));
            if (fs.existsSync(sessionPath)) {
              fs.rmSync(sessionPath, { recursive: true, force: true });
            }
          }
        }, 120_000);

        socky.ev.on("connection.update", async ({ qr, connection, lastDisconnect }) => {
          if (qr && !sentCodeMessage) {
            if (usarPairingCode) {
              const code = await socky.requestPairingCode(rid);
              await conn.sendMessage(
                msg.key.remoteJid,
                {
                  video: { url: "https://cdn.russellxz.click/b0cbbbd3.mp4" },
                  caption: `üîê *C√ìDIGO PARA: ${targetNumber}*\n\nAbre WhatsApp en el dispositivo de *${targetNumber}* y ve a:\nWhatsApp ‚Üí Ajustes ‚Üí Dispositivos vinculados ‚Üí Vincular un dispositivo\n\nüìã *C√≥digo:*`
                },
                { quoted: msg },
              );
              await sleep(1000);
              await conn.sendMessage(
                msg.key.remoteJid,
                { text: `\`\`\`${code}\`\`\`` },
                { quoted: msg },
              );
            } else {
              const qrImage = await QRCode.toBuffer(qr);
              await conn.sendMessage(
                msg.key.remoteJid,
                {
                  image: qrImage,
                  caption: `üì≤ *QR PARA: ${targetNumber}*\n\nEscanea este c√≥digo desde WhatsApp ‚Üí Ajustes ‚Üí Dispositivos vinculados`
                },
                { quoted: msg },
              );
            }
            sentCodeMessage = true;
          }

          if (connection === "open") {
            readyBot = true;
            clearTimeout(connectionTimeout);
            reconnectionAttempts.set(sessionPath, 0);

            // Mensaje de √©xito
            await conn.sendMessage(
              msg.key.remoteJid,
              {
                text: `üéâ *SUB-BOT CONECTADO EXITOSAMENTE*\n\nüì± *N√∫mero:* ${targetNumber}\n‚úÖ *Estado:* Conectado y operativo\nüïí *Hora:* ${new Date().toLocaleString()}\n\nüí° El sub-bot ahora est√° listo para usar. Revisa el chat privado del n√∫mero ${targetNumber} para las instrucciones.\n\n> Serbot by: *Anonymous.js*`
              },
              { quoted: msg },
            );

            await conn.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

            // Enviar instrucciones al chat privado del sub-bot
            const ownerJid = `${socky.user.id.split(":")[0]}@s.whatsapp.net`;
            await socky.sendMessage(ownerJid, {
              text: `‚ú® ¬°Hola! Bienvenido al sistema de SubBots Premium de M-ster Ultra Bot ‚ú®
              
‚úÖ *Estado:* Tu SubBot para el n√∫mero ${targetNumber} est√° *en l√≠nea y conectado*.

üìå *CONFIGURACI√ìN INICIAL:*

üîπ *Para usar en grupos:*
   Ve al grupo y escribe: \`.addgrupo\`

üîπ *Para autorizar usuarios en privado:*
   Responde un mensaje con: \`.addlista\`
   O usa: \`.addlista n√∫mero\`

üîπ *Cambiar prefijo de comandos:*
   \`.setprefix ‚ú®\`

üîπ *Ver comandos disponibles:*
   \`.menu\` o \`.help\`

üöÄ ¬°Disfruta de M-ster Ultra Bot!\n\n> SerBot by: *ghostdev.js*`
            }).catch(() => {
              console.log("No se pudo enviar mensaje de bienvenida al sub-bot");
            });

            await socketEvents(socky);
          }

          // ... (el resto del c√≥digo de reconexi√≥n se mantiene igual)
          if (connection === "close") {
            clearTimeout(connectionTimeout);
            const statusCode = new Boom(lastDisconnect?.error)?.output?.statusCode;
            console.log(`‚ùå Subbot ${targetNumber} desconectado (status: ${statusCode}).`);

            const shouldReconnect =
              statusCode !== DisconnectReason.loggedOut &&
              statusCode !== DisconnectReason.badSession &&
              statusCode !== DisconnectReason.forbidden &&
              statusCode !== 403;

            if (shouldReconnect) {
              const attempts = (reconnectionAttempts.get(sessionPath) || 0) + 1;
              reconnectionAttempts.set(sessionPath, attempts);

              if (attempts <= 3) {
                console.log(`üí± Reconectando ${targetNumber} (Intento ${attempts}/3)`);
                if (!readyBot && statusCode !== DisconnectReason.restartRequired) {
                  await conn.sendMessage(
                    msg.key.remoteJid,
                    {
                      text: `‚ö†Ô∏è *Problema de conexi√≥n con ${targetNumber}*\nRaz√≥n: ${statusCode}\nIntentando reconectar...`
                    },
                    { quoted: msg },
                  );
                }
                const index = subBots.indexOf(sessionPath);
                if (index !== -1) subBots.splice(index, 1);

                setTimeout(() => {
                  if (fs.existsSync(sessionPath)) {
                    subBots.push(sessionPath);
                    setupSocketEvents().catch((e) => console.error("Error en reconexi√≥n:", e));
                  } else {
                    console.log(`‚ÑπÔ∏è Sesi√≥n de ${targetNumber} eliminada. Cancelando reconexi√≥n.`);
                    reconnectionAttempts.delete(sessionPath);
                  }
                }, 3000);
              } else {
                console.log(`‚ùå L√≠mite de reconexi√≥n para ${targetNumber}. Eliminando sesi√≥n.`);
                await conn.sendMessage(
                  msg.key.remoteJid,
                  {
                    text: `‚ö†Ô∏è *L√≠mite de reconexi√≥n alcanzado para ${targetNumber}*\nLa sesi√≥n ha sido eliminada.`
                  },
                  { quoted: msg },
                );

                const index = subBots.indexOf(sessionPath);
                if (index !== -1) subBots.splice(index, 1);

                if (fs.existsSync(sessionPath)) {
                  fs.rmSync(sessionPath, { recursive: true, force: true });
                }
                reconnectionAttempts.delete(sessionPath);
              }
            } else {
              console.log(`‚ùå No se puede reconectar ${targetNumber}.`);
              if (!readyBot) {
                await conn.sendMessage(
                  msg.key.remoteJid,
                  {
                    text: `‚ö†Ô∏è *Sesi√≥n eliminada para ${targetNumber}*\n${statusCode}`
                  },
                  { quoted: msg },
                );
              }
              const index = subBots.indexOf(sessionPath);
              if (index !== -1) subBots.splice(index, 1);
              if (fs.existsSync(sessionPath)) {
                fs.rmSync(sessionPath, { recursive: true, force: true });
              }
            }
          }
        });

        socky.ev.on("creds.update", saveCreds);
      }

      await setupSocketEvents();
    } catch (e) {
      console.error("‚ùå Error en serbot:", e);

      const index = subBots.indexOf(sessionPath);
      if (index !== -1) {
        subBots.splice(index, 1);
      }
      await conn.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *Error con ${targetNumber}:* ${e.message}` },
        { quoted: msg },
      );
    }
  }

  await serbot();
};

handler.command = ["sercode", "code", "jadibot", "serbot", "qr"];
handler.tags = ["owner"];
handler.help = ["serbot <n√∫mero>", "code <n√∫mero>"];
module.exports = handler;